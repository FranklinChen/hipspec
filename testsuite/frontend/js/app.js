// Generated by CoffeeScript 1.4.0
(function() {

  window.hipspec_module = angular.module('hipspec', []);

  hipspec_module.filter('seconds', function() {
    return function(s) {
      if (s != null) {
        return s.toFixed(2);
      } else {
        return "";
      }
    };
  });

  hipspec_module.filter('ppresfile', function() {
    return function(s) {
      s = s.replace(/^results\//, function() {
        return "";
      });
      s = s.replace(/.json$/, function() {
        return "";
      });
      return s.replace(/_/g, function() {
        return " ";
      });
    };
  });

  hipspec_module.factory('config', function() {
    return {
      prod: {
        name: 'Productive Use of Failure',
        files: ['Definitions.hs', 'Properties.hs']
      },
      zeno: {
        name: 'Zeno/IsaPlanner',
        files: ['Definitions.hs', 'Properties.hs']
      },
      mini: {
        name: 'Mini',
        files: ['Mini.hs']
      },
      examples: {
        name: 'Examples',
        files: ['AppendLists.hs', 'BinLists.hs', 'Implies.hs', 'ListMonad.hs', 'Nat.hs', 'Nicomachus.hs', 'Reverse.hs', 'Rotate.hs']
      },
      'precision-recall': {
        name: 'Precision/Recall',
        files: []
      }
    };
  });

  hipspec_module.factory('request', function($http) {
    return {
      list: function(testsuite) {
        return $http.get("" + testsuite + "/json_list");
      },
      log: function(testsuite, instance) {
        return $http.get("" + testsuite + "/" + instance);
      }
    };
  });

  hipspec_module.controller('TestsuiteCtrl', function($scope, config) {
    $scope.empty = _.isEmpty;
    $scope.testsuites = config;
    $scope.testsuite = void 0;
    $scope.selected = null;
    return $scope.setTestsuite = function(v, n, fs) {
      $scope.selected = null;
      $scope.testsuite_name = n;
      $scope.testsuite_files = fs;
      return $scope.testsuite = v;
    };
  });

  hipspec_module.controller('CompareCtrl', function($scope, request, $http, $q) {
    $scope.content = "";
    $scope.viewFile = function(dir, file) {
      return $http.get("" + dir + "/" + file).success(function(res) {
        return $scope.content = res;
      });
    };
    $scope.table = {};
    $scope.headers = {};
    $scope.num_solved = 0;
    $scope.solved = {};
    $scope.display_prop = function(prop) {
      return prop.replace(/^prop_/, "");
    };
    $scope.num_problems = function() {
      return _.size($scope.headers);
    };
    return $scope.$watch('testsuite', function() {
      if ($scope.testsuite != null) {
        return request.list($scope.testsuite).success(function(list) {
          var i, u;
          $scope.headers = {};
          $scope.table = {};
          $scope.num_solved = 0;
          $scope.solved = {};
          u = $q.all((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = list.length; _i < _len; _i++) {
              i = list[_i];
              _results.push(request.log($scope.testsuite, i));
            }
            return _results;
          })());
          return u.then(function(logs) {
            var headers, http_res, log, message, num_solved, obj, prop, res, solved, table, time, type, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
            headers = {};
            table = {};
            num_solved = 0;
            solved = {};
            _ref = _.zip(list, logs);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              _ref1 = _ref[_i], i = _ref1[0], http_res = _ref1[1];
              log = http_res.data;
              for (_j = 0, _len1 = log.length; _j < _len1; _j++) {
                _ref2 = log[_j], time = _ref2[0], message = _ref2[1];
                _ref3 = _.pairs(message)[0], type = _ref3[0], obj = _ref3[1];
                res = {};
                if (type === "Finished") {
                  _ref4 = obj.unproved;
                  for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
                    prop = _ref4[_k];
                    headers[prop] = {};
                    res[prop] = {
                      solved: false,
                      failed: true
                    };
                  }
                  _ref5 = obj.proved;
                  for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
                    prop = _ref5[_l];
                    headers[prop] = {};
                    res[prop] = {
                      solved: true,
                      failed: false
                    };
                    if (res[prop].solved && !solved[prop]) {
                      solved[prop] = true;
                      num_solved++;
                    }
                  }
                  res.time = time;
                }
              }
              table[i] = res;
            }
            $scope.headers = headers;
            $scope.table = table;
            $scope.num_solved = num_solved;
            return $scope.solved = solved;
          });
        });
      }
    });
  });

  hipspec_module.controller('InstanceCtrl', function($scope, $http, request) {
    $scope.interestingType = function(type) {
      return String(_.contains(["FileProcessed", "QuickSpecDone", "InductiveProof", "PlainProof", "Finished"], type));
    };
    $scope.result = [];
    $scope.show = false;
    return $scope.toggle_shown = function() {
      $scope.show = !$scope.show;
      if (_.isEmpty($scope.result)) {
        return request.log($scope.testsuite, $scope.instance).success(function(x) {
          var message, obj, res, time, type, _i, _len, _ref, _ref1;
          res = [];
          for (_i = 0, _len = x.length; _i < _len; _i++) {
            _ref = x[_i], time = _ref[0], message = _ref[1];
            _ref1 = _.pairs(message)[0], type = _ref1[0], obj = _ref1[1];
            if (_.isArray(obj)) {
              obj = {};
            }
            obj.time = time;
            obj.type = type;
            res.push(obj);
          }
          return $scope.result = res;
        });
      }
    };
  });

}).call(this);
