#
# Settings:
#
# base_flags is an array of underscore-separated flags, for instance
#
# base_flags = "" -a -s -r_-i
#
# The variables provers, timeouts, indvars, inddepth and processes
# can be specified and the cross product of these will be tested
#
# These flags can also be set from the command line:
#
#    processes=4 indvars=3 make
#
RESULT_DIR = results

GHC       = ghc
GHC_FLAGS = -threaded -O2 --make -fexpose-all-unfoldings -fno-ignore-interface-pragmas -fno-omit-interface-pragmas -fforce-recomp
HIP_FLAGS = -l

# The different flags to test, separate flags with underscore
ifeq ($(base_flags),)
  base_flags := -r
endif

ifeq ($(provers),)
  provers := z
endif

ifeq ($(timeouts),)
  timeouts := 1
endif

ifeq ($(indvars),)
  indvars := 2
endif

ifeq ($(inddepth),)
  inddepth := 1
endif

ifeq ($(processes),)
  processes := 2
endif

flags := $(base_flags)

define cross_flags
flags := $(foreach flag,$(flags),$(foreach setting,$(2),$(flag)_$(1)$(setting)))
endef

$(eval $(call cross_flags,-p_,$(provers)))
$(eval $(call cross_flags,-t_,$(timeouts)))
$(eval $(call cross_flags,-N_,$(processes)))
$(eval $(call cross_flags,-S_,$(indvars)))
$(eval $(call cross_flags,-D_,$(inddepth)))

# All targets
all_targets :=

# Flag delimiter
delim = _
empty =
space = $(empty) $(empty)
comma = ,

# First argument is binary, then an underscore-separated list of flags
define flag_rule
$(RESULT_DIR)/$(1)$(2).json: $(1)
	mkdir -p `dirname $$@`
	./$(1) -l $(subst $(delim),$(space),$(2)) $(HIP_FLAGS) --json $$@
all_targets += $(RESULT_DIR)/$(1)$(2).json
endef

# Generate rules for a given file
define file_rule
$(1): $(1).hs
	$$(GHC) $$(GHC_FLAGS) $$(arg1) -o $$@

$(1)_runs: $(foreach flag,$(flags),$(RESULT_DIR)/$(1)$(flag).json)

$(foreach flag,$(flags),$(eval $(call flag_rule,$(file),$(flag))))
endef

# Generate all rules
$(foreach file,$(files),$(eval $(call file_rule,$(file))))

# Make all targets
all: $(all_targets)

# Make json list of all generated json result files
json_list:
	echo $(all_targets) | sed 's/ /","/g' | sed 's/^/["/' | sed 's/$$/"]/' > json_list

# Binaries
binaries: $(files)

debug:
	@echo $(flags)

# Remove all targets
clean:
	rm -f $(all_targets)
	rm -f $(files)
	rm -f json_list

# Targets that do not create a file with the same name (meta-targets)
.PHONY: all clean binaries debug json_list

# Shortcut variables for indexing prerequisites of rules:
arg1 = $(word 1,$+)
arg2 = $(word 2,$+)
arg3 = $(word 3,$+)
