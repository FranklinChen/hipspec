#
# Settings:
#   * theorem prover
#   * assoc important
#   * interesting candidates
#   * swap representatives
#   * prepend pruned
#   * induction variables
#   * induction depth
#   * timeout
#   * processes
#
# Always use -l --isolate
#
RESULT_DIR = results

GHC       = ghc
GHC_FLAGS = -threaded -O2 --make -fexpose-all-unfoldings -fno-ignore-interface-pragmas -fno-omit-interface-pragmas -fforce-recomp
N         = -N 2
HIP_FLAGS =

# Depends on files

# Flag delimiter
delim = _
empty =
space = $(empty) $(empty)
comma = ,

# The different flags to test, separate flags with underscore
base_flags = -r_-s
#	-i_-a_-s    \
#	-i_-a       \
#	-i_-s       \
#	-a_-s       \
#	-s          \
#	-a          \
#	-i          \
#	-r_-i_-a_-s \
#	-r_-i_-a    \
#	-r_-i_-s    \
#	-r_-a_-s    \
#	-r_-s       \
#	-r_-a       \
#	-r_-i       \
#	-r

flags := $(base_flags)

# Make flags from base flags times theorem prover to use
$(foreach flag,$(flags),$(eval \
	flags += $(flag)_-p_e \
			 $(flag)_-p_z))
#			 $(flag)_-p_f \
#			 $(flag)_-p_v \
#			 $(flag)_-p_x \
#
# # Times timeout, try 1 and 2 seconds
# $(foreach flag,$(flags),$(eval \
# 	flags += $(flag)_-t_1 \
# 			 $(flag)_-t_2 \
# 			 $(flag)_-t_3))
#
# Different induction settings
# $(foreach flag,$(flags),$(eval \
# 	flags += $(flag)_-D_1 \
# 			 $(flag)_-D_2))
$(foreach flag,$(flags),$(eval \
	flags += $(flag)_-S_1 \
 			 $(flag)_-S_3))
#            $(flag)_-S_2 \

# All targets
all_targets :=

# First argument is binary, then an underscore-separated list of flags
define flag_rule
$(RESULT_DIR)/$(1)$(2).json: $(1) json_list
	mkdir -p `dirname $$@`
	./$(1) -l $(subst $(delim),$(space),$(2)) $(N) $(HIP_FLAGS) --json $$@
all_targets += $(RESULT_DIR)/$(1)$(2).json
endef

# Generate rules for a given file
define file_rule
$(1): $(1).hs
	$$(GHC) $$(GHC_FLAGS) $$(arg1) -o $$@

$(foreach flag,$(flags),$(eval $(call flag_rule,$(file),$(flag))))
endef

# Generate all rules
$(foreach file,$(files),$(eval $(call file_rule,$(file))))

# Make all targets
all: $(all_targets)

# Make json list of all generated json result files
json_list:
	echo $(all_targets) | sed 's/ /","/g' | sed 's/^/["/' | sed 's/$$/"]/' > json_list

# Binaries
binaries: $(files)

# Remove all targets
clean:
	rm -f $(all_targets)
	rm -f $(files)
	rm -f json_list

# Targets that do not create a file with the same name (meta-targets)
.PHONY: all clean binaries

# Shortcut variables for indexing prerequisites of rules:
arg1 = $(word 1,$+)
arg2 = $(word 2,$+)
arg3 = $(word 3,$+)
